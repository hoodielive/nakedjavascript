Classes vs Prototypes 

-> Javascript does not have Classes 

Working with prototypes -> 
	<>-------------------------------------------------<>
	-> make an object that you like
	-> create new instances that inherit from that object
	-> customize new objects 
	-> classification and taxonomy are not neccessary 
	<>-------------------------------------------------<> 


Delegation 
	-> Differential Inheritance (each object obtains the material that distinguishes it from the object it is created from)
	
Object.create(prototype) -> this is the object that we want to inherit from

Object.prototype 

var mother = {
  a: 1,
  b: 2
}; 

var daughter = Object.create(mother);
daughter.b += 2; 

So if: 
		   MOTHER 
	<>------------------------<>
		a = 1 
		b = 2
	<>------------------------<> 

		   Daughter 
		daughter.b += 2;

		b = 4
	<>------------------------<> 

Everything in Javascript is an object -> 

	-> Number
	-> Boolean
	-> String
	-> Array
	-> Date
	-> RegExp
	-> Function


Numbers -> 
	-> Only one number type - No integer types
	-> 64-bit binary floating point
	-> IEEE-754 (aka Double) 


		a > 0
		b > 0 

		c = a + b; 

	-> Possible results:
		c < a
		c < b 

	-> Numbers are objects, so they have methods/properties: 
		-> toExponential
		-> toFixed
		-> toLocaleString
		-> toPrecision
		-> toString
		-> valueOf

	-> Every number inherits from Number.prototype 

		if (!Number.prototype.trunc) {
		  Number.prototype.trunc = 
		    function trunc(number) {
		      return (number >= 0)
		        ? Math.floor(number)
			: Math.ceil(number);
		    };
	         } 

	-> Numbers are first class objects
		-> A number can be:
			-> stored in a variable
			-> passed as a parameter
			-> returned from a function
			-> stored in an object
		-> can have:
			-> methods

	-> Math object 
		-> abs
		-> acos
		-> asin
		-> atan
		-> atan2
		-> ceil
		-> cos
		-> exp
		-> floor
		-> log
		-> max
		-> min
		-> pow
		-> random
		-> round
		-> sin
		-> sqrt
		-> tan
		-> E
		-> LN10
		-> LN2
		-> LOG2E
		-> PI
		-> SQRT1_2
		-> SQRT2
	
	-> NaN

-> String
	-> a sequence of characters 
	-> a sequence of 0 or more 16-bit Unicode characters
		-> UCS-2, not quite UTF-16
		-> No awareness of surrogate pairs 
	-> No separate character type
		-> Characters are represented as strings with length of 1
	-> Strings are immutable 
	-> Similar strings are equal ( === ) 
	-> String literals can use single or double quotes with \ escapement 
	-> Use " for external strings
	-> Use ' for internal strings and characters
	-> Use number's method (toString) to convert numbers to strings
	-> Use String function
		str = num.toString();
		str = String(num)
	-> Convert a string to a number
		-> Use the Number function
		-> Use the + prefix operator
		-> Use the parseInt function
			num = Number(str);
			num = +str; 
	-> String are objects, so they contain methods 
		-> charAt
		-> charCodeAt
		-> compareLocale
		-> concat
		-> indexOf
		-> lastIndexOf
		-> localeCompare
		-> match
		-> replace
		-> search
		-> slice
		-> split
		-> substring
		-> toLocaleLowerCase
		-> toLocaleUpperCase
		-> toString
		-> toUpperCase
		-> trim
			if (typeof String.prototype.trim !== 'function') {
			  String.prototype.trim = function () {
			    return this.replace(
			      /^\s*(\S*(\s+\S+)*)\s*$/,"$1");
			   };
			}
		-> valueOf

-> Arrays
	-> Array inherits from Object
	-> Indexes are converted to strings and used as names for retreiving values 
	-> Very efficient for sparse arrays
	-> Not very efficient in most other cases (dense arrays)
	-> One advantage: No need to provide a length or type when creating an array
	-> Length
	  -> Arrays, unlink objects, have a special length property
	  -> It is always 1 larger than the highest integer subscript
	-> Array Literals
		-> An array literal uses [] 
		-> it can contain any number of expressions separated by commas
			myList = ['oats', 'peas', 'beans']; 
			myList[myList.length] = 'barley';
		-> The dot notation should not be used with arrays 
	-> Arrays are objects, so they contain methods
		-> concat
		-> every
		-> filter
		-> forEach
		-> indexOf
		-> join
		-> lastIndexOf
		-> map
		-> pop
		-> push
		-> reduce
		-> reduceRight
		-> reverse
		-> shift
		-> slice
		-> some
		-> splice
		-> some
		-> toLocaleString
		-> toString
		-> unshift

	-> sort method 
		var n = [4, 8, 15, 16, 23, 42]; 

		n.sort(); 

		// n is [15, 16, 23, 4, 42, 8] // sorts them as strings lol 
	
	-> delete array by elements:
		delete array[number] 

		-> Removes the element, but leaves a hole in the numbering
			array.splice(number, 1)
		-> Removes the element and renumbers all the following elements 

		myArray = ['a', 'b', 'c', 'd']; 
		delete myArray[1];
		// ['a', undefined, 'c', 'd'] 

		myArray.splice(1, 1);
		// ['a', 'c', 'd'] 

		Arrays vs Objects
		-> Use objects when the names are arbitrary strings
		-> Use arrays when the names are sequential integers 
		-> Don't get confused by the term Associative Array (objects) 

Date -> not y2k ready 

RegExp
	-> borrowed from PERL 4 
	-> http://jex.im/regulex/ 


All values are objects except - null and undefined (bottom values) 

	-> 'null' -> 
	-> 'undefined' -> A value that is not an object (has no property values) 
 	-> used to indicate the absence or end of something 


typeof 
		-> the typeof prefix operator returns a string identifying the type of a value

Falsy values
		-> false
		-> null
		-> "" (empty string) 
		-> 0
		-> NaN
		-> All other values (including all objects) are truthy
			"0" "false"
		-> All values can be said to be boolish


Loosely Typed 
		-> Any of these types can be stored in an variable, or passed as a parameter to any function
		-> The langugae is not untyped
		-> This is a good part 



Syntax 
	-> Identifiers 
		-> Starts with a letter or _ or $ 
		-> Followed by zero or more letters, digits, _ or $ 
		-> By convention, all variables, parameters, members, and function names start with lower case
		-> Except for constructor functions which start with upper case
		-> Initial _ should be reserved for implementations
		-> $ should be reserved for machines 
	-> syntactically related to C

	
	-> Review Operators 

Statements 
	-> expression
	-> if
	-> switch
	-> while
	-> do
	-> for
	-> break
	-> continue
	-> return
	-> try/throw

		-> statements can have labels 
		-> no more need for for Loops -.- use forEach function for Arrays or for in 

FUNCTIONS
Method, Class, Constructor, Module 

-> make functions using the function expression:
	-> function
	-> optional name 
	-> parameters
		-> wrapped in parens
		-> zero or more names
		-> separated by , (comma) 
	-> body
		-> wrapped in curly braces
		-> zero or more statements 

-> a function expression produces an 'instance' of a function object
-> function objects are first class
	-> may be passed as an argument to a function
	-> may be returned from a function
	-> may be assigned to a variable
	-> may be stored in an object or array
-> function objects inherit from Function.prototype
-> var statement
	-> declares and initializes variables within a function 
	-> types are not specified 
	-> a variable declared anywhere within a function is visible everywhere within the function 
	-> it gets split into 2 parts:
		-> the declaration part gets hoisted to the top of the function, initializing with undefined
		-> the initialization part turns into an ordinary assignment
		ex -> var myVar = 0, myOtherVar; 

	Expands to:
		-> var myVar = undefined,
		   myOtherVar = undefined,
		   ... 
		myVar = 0 
-> function statement looks like the expression:
	-> function
	-> mandatory name
	-> parameters
		-> wrapped in parens
		-> zero or more names
		-> separated by, (comma)
	-> body
		-> wrapped in curly braces
		-> zero or more statements

		function foo() {} 

Rules:
	-> Declare all variables at the top of the function 
	-> Declare all functions before you call them
	-> The language provides mechanisms that allow you to ignore this advice, but they are problematic 

Return Statements: 
	-> return expression; 
		or 
	-> return; 

	-> if there is 'no expression', then the return value is undefined 
	-> except for constructors, whose default return value is 'this' 
	-> don't make functions in a loop 
